// <auto-generated />
using System;
using ApiStudyBuddy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiStudyBuddy.Migrations
{
    [DbContext(typeof(ApiStudyBuddyContext))]
    partial class ApiStudyBuddyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiStudyBuddy.Models.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeckId"));

                    b.Property<string>("DeckDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeckName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeckId");

                    b.ToTable("Decks");

                    b.HasData(
                        new
                        {
                            DeckId = 1,
                            DeckDescription = "Design patterns all about class instantiation",
                            DeckName = "Creational Design Patterns"
                        },
                        new
                        {
                            DeckId = 2,
                            DeckDescription = "Design patterns all about class and Object composition",
                            DeckName = "Structural Design Patterns"
                        },
                        new
                        {
                            DeckId = 3,
                            DeckDescription = "Design patterns all about Class's objects communication",
                            DeckName = "Behavorial Design Patterns"
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.DeckFlashCard", b =>
                {
                    b.Property<int>("DeckFlashCardId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("FlashCardId")
                        .HasColumnType("int");

                    b.HasKey("DeckFlashCardId");

                    b.ToTable("DeckFlashCards");

                    b.HasData(
                        new
                        {
                            DeckFlashCardId = 1,
                            DeckId = 1,
                            FlashCardId = 1
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.DeckGroup", b =>
                {
                    b.Property<int>("DeckGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeckGroupId"));

                    b.Property<string>("DeckGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeckGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeckGroupId");

                    b.ToTable("DeckGroups");

                    b.HasData(
                        new
                        {
                            DeckGroupId = 1,
                            DeckGroupDescription = "",
                            DeckGroupName = "Design Patterns"
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.DeckGroupDeck", b =>
                {
                    b.Property<int>("DeckGroupDeckId")
                        .HasColumnType("int");

                    b.Property<int>("DeckGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.HasKey("DeckGroupDeckId");

                    b.ToTable("DeckGroupDecks");

                    b.HasData(
                        new
                        {
                            DeckGroupDeckId = 1,
                            DeckGroupId = 1,
                            DeckId = 1
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.FlashCard", b =>
                {
                    b.Property<int>("FlashCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlashCardId"));

                    b.Property<string>("FlashCardAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlashCardQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlashCardId");

                    b.ToTable("FlashCards");

                    b.HasData(
                        new
                        {
                            FlashCardId = 1,
                            FlashCardAnswer = "Creates an instance of several families of classes",
                            FlashCardQuestion = "What is abstract factory"
                        },
                        new
                        {
                            FlashCardId = 2,
                            FlashCardAnswer = "A class of which only a single instance can exist",
                            FlashCardQuestion = "What is Singleton?"
                        },
                        new
                        {
                            FlashCardId = 3,
                            FlashCardAnswer = "Add responsibilites to objects dynamically",
                            FlashCardQuestion = "What is decorator?"
                        },
                        new
                        {
                            FlashCardId = 4,
                            FlashCardAnswer = "A single class that represents an entire subsystem",
                            FlashCardQuestion = "What is facade?"
                        },
                        new
                        {
                            FlashCardId = 5,
                            FlashCardAnswer = "Sequentially access the elements of a collection",
                            FlashCardQuestion = "What is iterator?"
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.StudySession", b =>
                {
                    b.Property<int>("StudySessionId")
                        .HasColumnType("int");

                    b.Property<int>("DeckGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudySessionId");

                    b.HasIndex("UserId");

                    b.ToTable("StudySessions");

                    b.HasData(
                        new
                        {
                            StudySessionId = 1,
                            DeckGroupId = 0,
                            DeckId = 1,
                            EndTime = new DateTime(2023, 9, 11, 15, 35, 15, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 9, 11, 15, 5, 15, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.StudySessionFlashCard", b =>
                {
                    b.Property<int>("StudySessionFlashCardId")
                        .HasColumnType("int");

                    b.Property<int>("FlashCardId")
                        .HasColumnType("int");

                    b.Property<int>("StudySessionId")
                        .HasColumnType("int");

                    b.HasKey("StudySessionFlashCardId");

                    b.ToTable("StudySessionsFlashCards");

                    b.HasData(
                        new
                        {
                            StudySessionFlashCardId = 1,
                            FlashCardId = 1,
                            StudySessionId = 1
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "JohnDoe@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "1234",
                            Username = "JDoe1"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "MaryJane@gmail.com",
                            FirstName = "Mary",
                            LastName = "Jane",
                            Password = "4321",
                            Username = "MJane1"
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.UserDeck", b =>
                {
                    b.Property<int>("UserDeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDeckId"));

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDeckId");

                    b.HasIndex("DeckId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserDecks");

                    b.HasData(
                        new
                        {
                            UserDeckId = 1,
                            DeckId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.UserDeckGroup", b =>
                {
                    b.Property<int>("UserDeckGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DeckGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDeckGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDeckGroups");

                    b.HasData(
                        new
                        {
                            UserDeckGroupId = 1,
                            DeckGroupId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.DeckFlashCard", b =>
                {
                    b.HasOne("ApiStudyBuddy.Models.Deck", "Deck")
                        .WithMany("DeckFlashCards")
                        .HasForeignKey("DeckFlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiStudyBuddy.Models.FlashCard", "FlashCard")
                        .WithOne("DeckFlashCard")
                        .HasForeignKey("ApiStudyBuddy.Models.DeckFlashCard", "DeckFlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("FlashCard");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.DeckGroupDeck", b =>
                {
                    b.HasOne("ApiStudyBuddy.Models.DeckGroup", "DeckGroup")
                        .WithOne("DeckGroupDeck")
                        .HasForeignKey("ApiStudyBuddy.Models.DeckGroupDeck", "DeckGroupDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiStudyBuddy.Models.Deck", "Deck")
                        .WithMany("DeckGroupDecks")
                        .HasForeignKey("DeckGroupDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("DeckGroup");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.StudySession", b =>
                {
                    b.HasOne("ApiStudyBuddy.Models.DeckGroup", "DeckGroup")
                        .WithMany("StudySessions")
                        .HasForeignKey("StudySessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiStudyBuddy.Models.Deck", "Deck")
                        .WithMany("StudySessions")
                        .HasForeignKey("StudySessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiStudyBuddy.Models.User", "User")
                        .WithMany("StudySessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("DeckGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.StudySessionFlashCard", b =>
                {
                    b.HasOne("ApiStudyBuddy.Models.FlashCard", "FlashCard")
                        .WithOne("StudySessionFlashCard")
                        .HasForeignKey("ApiStudyBuddy.Models.StudySessionFlashCard", "StudySessionFlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiStudyBuddy.Models.StudySession", "StudySession")
                        .WithOne("StudySessionFlashCard")
                        .HasForeignKey("ApiStudyBuddy.Models.StudySessionFlashCard", "StudySessionFlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashCard");

                    b.Navigation("StudySession");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.UserDeck", b =>
                {
                    b.HasOne("ApiStudyBuddy.Models.Deck", "Deck")
                        .WithOne("UserDeck")
                        .HasForeignKey("ApiStudyBuddy.Models.UserDeck", "DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiStudyBuddy.Models.User", "User")
                        .WithMany("UserDecks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.UserDeckGroup", b =>
                {
                    b.HasOne("ApiStudyBuddy.Models.DeckGroup", "DeckGroup")
                        .WithOne("UserDeckGroup")
                        .HasForeignKey("ApiStudyBuddy.Models.UserDeckGroup", "UserDeckGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiStudyBuddy.Models.User", "User")
                        .WithMany("UserDeckGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeckGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.Deck", b =>
                {
                    b.Navigation("DeckFlashCards");

                    b.Navigation("DeckGroupDecks");

                    b.Navigation("StudySessions");

                    b.Navigation("UserDeck");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.DeckGroup", b =>
                {
                    b.Navigation("DeckGroupDeck");

                    b.Navigation("StudySessions");

                    b.Navigation("UserDeckGroup");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.FlashCard", b =>
                {
                    b.Navigation("DeckFlashCard");

                    b.Navigation("StudySessionFlashCard");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.StudySession", b =>
                {
                    b.Navigation("StudySessionFlashCard");
                });

            modelBuilder.Entity("ApiStudyBuddy.Models.User", b =>
                {
                    b.Navigation("StudySessions");

                    b.Navigation("UserDeckGroups");

                    b.Navigation("UserDecks");
                });
#pragma warning restore 612, 618
        }
    }
}
